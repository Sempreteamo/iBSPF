library(FKF)
set.seed(456)
Num <- 50
N <- vector()
N[1] <- Num
Time = 1000
L = 2
A = 0.42
B = 1
C = 1
D = 0.3
d = 1
k <- 5
tau <- 0.5
X <- matrix(NA, Time, Num)
X_ <- matrix(NA, Time, Num)
w <- matrix(NA, Time, Num)
X_true <- vector()
obs <- vector()
kappa = 0.5
psi_pa <- matrix(NA, nrow = Time, ncol = 2)
Z <- vector()

dt <- ct <- 0
Tt <- as.matrix(A)
P0 <- Zt <- Ht <- Gt <- as.matrix(1)
a0 <- 0

ESS <- function(t,l,w, is.log=FALSE){
  if(is.log) {
    mx <- max(w[t-1,1:N[l]])
    s <- sum(exp(w[t-1,1:N[l]]-mx))
    ess <- 1/sum((exp(w[t-1,1:N[l]]-mx)/s)^2)
  }else{
    s <- sum(w[t-1,1:N[l]])
    ess <- 1/sum((w[t-1,1:N[l]]/s)^2) 
  }
  return(ess)  
}

Obs <- function(){
  X_true[1] <- rnorm(1)   
  for(t in 2:Time){  #observations
    X_true[t] <- rnorm(1) + A*X_true[t-1] 
  }
  return(rnorm(Time) + X_true)
}
obs <- Obs()

f <- function(x){
  return (rnorm(d) + as.vector(A*x))   #trans prob
}

g <- function(y, x){  
  return (det(diag(2*pi, nrow = d, ncol = d))^(-1/2)*exp((-1/2)*(y-x)^2)) #obs prob  C%*%x = x
  #dnorm(X[t,1:N],obs[t])
}

g_aux <- function(y, x, t, psi_pa){  
  if(t == 1){
    return(dnorm(x, y)*psi_tilda(x, psi_pa, 1)*(2*pi*(psi_pa[1, d+1]^2+1))^
             (-1/2)*exp((-1/2)*(-psi_pa[1, 1])^2/(psi_pa[1,  d+1]^2+1))/psi_t(x, psi_pa, 1))  #initialisation of g = t=1 or t=L?
  }else{
    return(dnorm(x, y)*psi_tilda(x, psi_pa, t)/psi_t(x, psi_pa, t))  #g_2:T 
  }
}

f_aux <- function(x, psi_pa, t){  
  return(rnorm(1, (psi_pa[t,2]^2*A*x +psi_pa[t,1])/(psi_pa[t,2]^2+1), 
               sqrt(psi_pa[t,2]^2 / (psi_pa[t,2]^2+1))))  #f_2:T 
}

####APF####
APF <- function(psi_pa, l){
  #l >= 2
  Z[l] <- 0
  
  X[1,1:N[l]] <- mu_aux(psi_pa, l)  #particles
  
  for(i in 1:N[l]){
    w[1,i] <- g_aux(obs[1], X[1,i],1, psi_pa) #weights g(obs[1,], X[1,i,])*psi_tilda(X[1,i,], psi_pa, 2)  
  }
  re=0
  #t=2:T
  #2. conditional sample
  for(t in 2:Time){
    
    print(t)
    
    #a)
    
    if(ESS(t,l,w) <= kappa*N[l]){
      re = re+1
      w_ <- w[t-1,1:N[l]]/sum(w[t-1,1:N[l]])   #each t
      mix <- sample(1:N[l],N[l], replace = TRUE, prob = w_)
      
      for(i in 1:N[l]){
        X[t,i] <- f_aux(X[t-1, mix[i]], psi_pa, t)
        w[t,i] <- g_aux(obs[t], X[t,i], t, psi_pa)  
      }
    }else{
      
      
      #b)
      for(i in 1:N[l]){
        
        X[t,i] <- f_aux(X[t-1,i],psi_pa, t) 
        w[t,i] <- w[t-1,i]*g_aux(obs[t], X[t,i],t, psi_pa)  
      }
    }
    
  }
  
  for(t in 1:Time){
    sum_g = 0
    for(i in 1:N[l]){
      sum_g = sum_g + g_aux(obs[t],X[t,i],t,psi_pa)
    }
    Z[l] = Z[l] + log(sum_g/N[l])
  }
  print(paste0('re=',re))
  
  return(list(X, w, Z))
}

####Psi####
Psi <- function(l, n, X){
  
  for(t in n:(n-L+1)){
    
    print(t)
    
    if(t == n){
      psi[t,1:N[l]] <- dnorm(X[t,1:N[l]], obs[t])   
      
    }else{
      
      for(i in 1:N[l]){
        psi[t,i] <- dnorm(X[t,i], obs[t])*dnorm(A*X[t,i],psi_pa[t+1, 1],sqrt(psi_pa[t+1,2]^2+1))
        
      }
    }
    
    #2. calculate psi_t
    #calculate min
    fn <- function(x, X, psi){
      lambda <-  2*sum(dnorm(X[t,1:N[l]],mean=x[1],sd=x[2]) * psi[t,1:N[l]]) / sum(psi[t,1:N[l]]^2)
      return(sum((psi[t,1:N[l]] - (1/lambda)*dnorm(X[t,1:N[l]],mean=x[1],sd=x[2]))^2))
    }
    
    #get the distribution of psi_t
    if(t == n){
      psi_pa[t,] <- optim(par = c(mean(X[t,1:N[l]]),1),
                          fn = fn, X = X, psi = psi, method='L-BFGS-B',lower=c(-Inf,0,0),upper=c(Inf,Inf,Inf))$par
    }else{
      psi_pa[t,] <- optim(par = c(X[t,which.max(psi[t,1:N[l]])],1), 
                          fn = fn, X = X, psi = psi, method='L-BFGS-B',lower=c(-Inf,0,0),upper=c(Inf,Inf,Inf))$par
    }
    
    print(psi_pa[t,])
    print(obs[t])
  }
  
  return(psi_pa)
  
}
####init-APF####
init_APF <- function(X, l, n){
  l = 1
  re = 0
  for(t in (n-L+1):n){
    print(t)
    
    if(ESS(t,l,w, is.log=TRUE) <= kappa*N[l]){
      
      re = re + 1
      
      w_ <- w[t-1,1:N[l]]/sum(w[t-1,1:N[l]])
      mix <- sample(1:N[l], N[l], replace = TRUE, prob = w_)
      X[t,1:N[l]] <- rnorm(Time) + A*X[t-1, mix]   
      w[t,1:N[l]] <- dnorm(X[t,1:N[l]], obs[t], log = TRUE) 
      
    }else{
      X[t,1:N[l]] <- rnorm(Time) + A*X[t-1,1:N[l]] 
      w[t,1:N[l]] <- w[t-1,1:N[l]] + dnorm(X[t,1:N[l]], obs[t], log = TRUE)  
    }
  }
  return(list(X=X, w=w))
}

####psi-APF####
psi_APF <- function(n, X){
  l = 1
  
  Z[1] = 0
  for(t in 1:Time){
    Z[1] = Z[1] + log(mean(apply(as.matrix(X[t,1:N[l]]),1,function(x) dnorm(x, obs[t]))))
  }
  
  while(TRUE){
    
    #a)
    output <- list()
    
    if(l != 1){
      output <-  APF(psi_pa, l)
      obs <-output[[1]]
      X <- output[[2]]
      w <- output[[3]]
      Z <- output[[4]]
    }
    
    #b)
    
    if(l <= k | (Num(Z, l, k) >= tau)){
      #psi^{l+1}
      
      psi_pa <- Psi(l, n, X) 
      
      if(l > k & N[max(l-k,1)] == N[l] & is.unsorted(Z[max(l-k,1):l])){  
        N[l+1] <- 2*N[l]
        
      }else{
        N[l+1] <- N[l]
      }
      
      print(paste0('Z[l]=',Z[l]))
      
      print(paste0('Z=',fkf.obj))
      
      l <- l+1
    }else break
  }
  return(psi_pa)
}


####init-BSPF####
Init <- function(){
  #X_1:L sample from q(x_1:L)=p(x_1:L|y_1:L)=p(x_L|y_1:L)*(from 1:n-1 p(x_p|y_1:p)*f)
  if(L == 1){
    X[1,] <-  rnorm(Num, (C*obs[1]*D^2)/(D+C^2), sqrt(D/(D+C^2)))  #pass
    
    w[1,] <- log((2*pi*(1+D))^(-1/2)*exp((-1/2)*(obs[1])^2/(1+D)))  #pass
    
  }else{
    a0 <- 0
    fkf.mu <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$att
    fkf.var <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$Ptt
    X[L,] <- rnorm(Num, fkf.mu[L], sqrt(fkf.var[L]))
    for(p in (L-1):1){
      for(i in 1:N){
        X[p,i] <- rnorm(1, (A*X[p+1,i]*fkf.var[p] + fkf.mu[p])/(A^2*fkf.var[p] + 1),sqrt(fkf.var[p]/(A^2*fkf.var[p] + 1)))
      } #pass
    }
    w[L,] <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs[1:L]))$logLik  #pass
    
  }
  return(list(X=X, w=w))
}

X <- Init()$X
w <- Init()$w

####BSPF####
re = 0
for(n in (L+1):Time){
  print(n)
  if(ESS(n,1,w, is.log =  TRUE) <= kappa*N){
    re = re + 1
    mx <- max(w[n-1,])
    w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
    Z = Z + log(mean(exp(w[n-1,]-mx))) + mx
    s <- sample(1:Num, size=Num, replace=TRUE, prob=w_) 
    if(L == 1){
      
      for(i in 1:Num){
        X[n,i] <- rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,s[i]]+obs[n]*B*C/(C^2*B+D))/2, sqrt((1-B*C^2/(C^2*B+D))*B))
        #rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,s[i]]+obs[n]*B*C/(C^2*B+D))/2, sqrt((1-B*C^2/(C^2*B+D))*B))
      }  #pass
      w[n,] = log((2*pi*(B^2+D^2))^(-1/2)*exp((-1/2)*(A*X[n-1,s]-obs[n])^2/(B^2+D^2))) 
      ##pass
      
    }else{
      X_ <- init_APF(X, 1, n)$X #需要改变从n-L+1到n值吗？
      
      psi_pa <- psi_APF(n, X_)
      P <- rep(0,Num)
      P_ <- rep(0,Num)
      for(p in n:(n-L+1)){
        for(i in 1:Num){
          X_[p,i] <- f_aux(X_[p,mix[i]], psi_pa, p)
          P[i] <- P[i] + dnorm(X_[p,mix[i]], (A*X_[p-1,mix[i]]+C*obs[n])/2, 1/(1+C^2), log = TRUE)
        }
      }
      
      for(p in (n-1):(n-L+1)){
        for(i in 1:Num){
          P_[i] <- P_[i] + dnorm(X[p,mix[i]], (A*X[p-1,mix[i]]+C*obs[n])/2, 1/(1+C^2), log = TRUE)
        }
      }
      
      w[n,] <- P + f_aux(X_[n-1,mix], psi_pa, n-1) - P_ -  f_aux(X_[n,mix], psi_pa, n)
      X <- X_
    }
    
  }else{
    if(L == 1){
      for(i in 1:Num){
        X[n,i] <- rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,i]+obs[n]*B*C/(C^2*B+D)), sqrt((1-B*C^2/(C^2*B+D))*B))
        #rnorm(1, ((1-B*C^2/(C^2*B+D))*A*X[n-1,i]+obs[n]*B*C/(C^2*B+D)), sqrt((1-B*C^2/(C^2*B+D))*B))  #pass
        
        w[n,i] = w[n-1,i] + log((2*pi*(B^2+D^2))^(-1/2)*exp((-1/2)*(A*X[n-1,i]-obs[n])^2/(B^2+D^2)))
        #改
      }
      
    }else{
      X_ <- init_APF(X, 1, n)$X #需要改变从n-L+1到n值吗？
      
      psi_pa <- psi_APF(n, X_)
      P <- rep(0,Num)
      P_ <- rep(0,Num)
      for(p in n:(n-L+1)){
        for(i in 1:N){
          X_[p,i] <- f_aux(X_[p,i], psi_pa, p)
          P[i] <- P[i] + dnorm(X_[p,i], (A*X_[p-1,i]+C*obs[n])/2, 1/(1+C^2), log = TRUE)
        }
      }
      
      for(p in (n-1):(n-L+1)){
        for(i in 1:Num){
          P_[i] <- P_[i] + dnorm(X[p,i], (A*X[p-1,i]+C*obs[n])/2, 1/(1+C^2), log = TRUE)
        }
      }
      
      for(i in 1:N){
        w[n,i] <- w[n-1,i] + f_aux(X_[n-1,i], psi_pa, n-1) - P_ -  f_aux(X_[n,i], psi_pa, n)
      }
      X <- X_
    }
  }
}

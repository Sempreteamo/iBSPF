library(mvnfast)
library(MASS)
library(FKF)
seed.label<-as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
#start = proc.time()
set.seed(123)
library(FKF)
final <- vector()
Num <- 500
N <- vector()
N[1] <- Num
Time = 50
#L_candidate=c(1,2,3,5,7,9)
#L=L_candidate[(seed.label-1)%/%5+1]
L = 5
alpha = 0.42
d = 10
k <- 5
tau <- 0.5
kappa = 0.5
A <- matrix(nrow = d, ncol = d)
for (i in 1:d){
  for (j in 1:d){
    A[i,j] = alpha^(abs(i-j) + 1)
  }
}
B = C = D = diag(1, nrow = d, ncol = d)
X_true <-  matrix(0, nrow = Time, ncol = d )
obs <-  matrix(0, nrow = Time, ncol = d )

dt <- ct <- matrix(0, d, 1)
Tt <- A
P0 <- Zt <- Ht <- Gt <- diag(1, d, d)
a0 <- rep(0, d)
index <- 1
avg <- matrix(nrow = 1, ncol = Time)

Obs <- function(){
  X_true[1,] <- rnorm(d)     
  for(t in 2:Time){  #observations
    X_true[t,] <- rnorm(d) + A%*%X_true[t-1,]  #t(rnorm(d) + A%*%x)
  }
  return(matrix(rnorm(Time*d, X_true, 1), ncol = d))
}
obs <- Obs()

index <- 1
#for(qq in (10*((seed.label-1)%%5+1)-9):(10*((seed.label-1)%%5+1))){
# set.seed(qq)
X <- array(NA, dim = c(Time, Num, d))
X_ <- array(NA, dim = c(Time, Num, d))
w <- matrix(NA, Time, Num)
Z = 0
Z_apf <- vector()

ESS <- function(t,w, is.log=FALSE){
  if(is.log) {
    mx <- max(w[t-1,])
    s <- sum(exp(w[t-1,]-mx))
    ess <- 1/sum((exp(w[t-1,]-mx)/s)^2)
  }else{
    s <- sum(w[t-1,])
    ess <- 1/sum((w[t-1,]/s)^2) 
  }
  return(ess)  
}

fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs))
fks.obj <- fks(fkf.obj)
fks_mean <- fks.obj$ahatt[,Time]
fks_cov <- fks.obj$Vt[,,Time]

f <- function(x){
  return (rnorm(d) + as.vector(A%*%x))   #trans prob
}

g <- function(y, x){  
  return ((2*pi)^(-d/2)*exp((-1/2)*t(y-x)%*%(y-x))) #obs prob  C%*%x = x
}

mu_aux <- function(psi_pa, l, N, t){  
  return(rmvn(N[l], as.vector(diag(((psi_pa[t, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d)%*%
                                (diag((psi_pa[t, (d+1):(d+d)])^(-1), nrow=d,ncol=d)%*%psi_pa[t,1:d])), 
              diag(((psi_pa[t, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d)))
}

g_aux <- function(y, x, t, psi_pa, n){  
  if(t == (n-L+1)){
    return(g(y, x)*psi_tilda(x, psi_pa, t, n)*((2*pi)^(-d/2)*det(diag(psi_pa[t, (d+1):(d+d)]+1, nrow=d,ncol=d))^
                                                 (-1/2)*exp((-1/2)*t(-psi_pa[t, 1:d])%*%
                                                              diag((psi_pa[t, (d+1):(d+d)]+1)^(-1), nrow=d,ncol=d)%*%
                                                              (-psi_pa[t, 1:d])))/psi_t(x, psi_pa, t, n))  #initialisation of g = t=1 or t=L?
  }else{
    return(g(y, x)*psi_tilda(x, psi_pa, t, n)/psi_t(x, psi_pa, t, n))  #g_2:T 
  }
}


f_aux <- function(x, psi_pa, t){
  return(rmvn(1, as.vector(diag(((psi_pa[t, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d)%*%
                             (A%*%x + diag(psi_pa[t, (d+1):(d+d)]^(-1), nrow=d,ncol=d)%*%psi_pa[t,1:d])), 
              diag(((psi_pa[t, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d)))  #f_2:T 
}

Num_apf <- function(Z, l, k){
  return(sd(exp(Z[max(l-k,1):l]-max(Z[max(l-k,1):l])))/mean(exp(Z[max(l-k,1):l]-max(Z[max(l-k,1):l]))))
}

psi_tilda <- function(x, psi_pa, t, n){  #from 0 to T. 0,T = 1 
  if(t == n){
    psi_tilda <- 1
  }else{   #psi_pa_t = psi_t
    psi_tilda <- (2*pi)^(-d/2)*det(diag(psi_pa[t+1, (d+1):(d+d)]+1, nrow=d, ncol=d))^(-1/2)*
      exp((-1/2)*t(as.vector(A%*%x) - psi_pa[t+1, 1:d])%*%diag((psi_pa[t+1, (d+1):(d+d)]+1)^(-1), nrow=d,ncol=d)%*%
            (as.vector(A%*%x)-psi_pa[t+1, 1:d])) #f(xt, 鑴欒伀鑴楄仮t+1 )   #var should be psi^2+1?
  }
  return(psi_tilda)
}

psi_t <- function(x, psi_pa, t, n){ #from 1 to T+1. 1, T+1 = 1  
  if(t == (n + 1)){
    psi_t <- 1
  }else{
    psi_t <- (2*pi)^(-d/2)*det(diag(psi_pa[t, (d+1):(d+d)], nrow=d,ncol=d))^(-1/2)*						
      exp((-1/2)*t(x-psi_pa[t, 1:d])%*%diag((psi_pa[t, (d+1):(d+d)])^(-1), nrow=d,ncol=d)%*%						
            (x-psi_pa[t, 1:d]))
  }
  return(psi_t)
}

change_mu <- function(w, X){
  sample <- matrix(0,Num,d)
  mx <- max(w[n-1,])
  w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
  s <- sample(1:Num, size = Num, replace = TRUE, prob = w_) 
  mus <- X[n-L,,]
  for(i in 1:Num){
    sample[i,] <- rnorm(d) + as.vector(A%*%mus[s[i],])
  }
  return(list(sample, w_))
}

change_mupsi <- function(w, X, psi_pa, t, N, l){
  sample <- matrix(0,Num,d)
  mx <- max(w[n-1,])
  w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
  s <- sample(1:N[l], size = Num, replace = TRUE, prob = w_) 
  mus <- X[n-L,,]
  for(i in 1:N[l]){
    sample[i,] <- f_aux(mus[s[i],], psi_pa, t)
    
  }
  return(list(sample, w_))
}

SR <- function(t, w) {
  indices <- integer(length(w[t-1,]))
  mx <- max(w[t-1,])
  w_ <- exp(w[t-1,]-mx)/sum(exp(w[t-1,] - mx))
  mix <- vector()
  
  U <- runif(1,0, 1/Num)
  s <- 0
  
  for (m in 1:ncol(X)) {
    k <- 0
    s <- s + w_[m]
    while (s > U) {
      k <- k + 1
      U <- U + 1/Num
    }
    indices[m] <- k
  }
  
  for(i in 1:ncol(X)){
    if(indices[i] > 0){
      mix <- c(mix, rep(i, indices[i]))
    }
  }
  return(mix)
}

####APF####
APF <- function(psi_pa, l, Z_apf, N){
  #l >= 2
  X_apf <- array(NA, dim = c(Time, N[l], d))
  w_apf <- matrix(NA, Time, N[l])
  Z_apf[l] <- 0
  
  X_apf[n-L+1,,] <- mu_aux(psi_pa, l, N, n-L+1)  
  
  for(i in 1:N[l]){
    w_apf[n-L+1,i] <- log(g_aux(obs[n-L+1,], X_apf[n-L+1,i,], n-L+1, psi_pa, n)) 
  }
  
  #t=2:T
  #2. conditional sample
  for(t in (n-L+2):n){
    
    #a)
    
    if(ESS(t,w_apf, is.log = TRUE) <= kappa*N[l]){
      
      mix <- SR(t, w_apf)
      
      for(i in 1:N[l]){
        X_apf[t,i,] <- f_aux(X_apf[t-1, mix[i],], psi_pa, t)
        w_apf[t,i] <- log(g_aux(obs[t,], X_apf[t,i,], t, psi_pa, n))  
      }
    }else{
      #b)
      for(i in 1:N[l]){
        X_apf[t,i,] <- f_aux(X_apf[t-1,i,], psi_pa, t) 
        w_apf[t,i] <- w_apf[t-1,i] + log(g_aux(obs[t,], X_apf[t,i,], t, psi_pa, n))  
      }
    }
    
  }
  
  mx <- max(w_apf[n, 1:N[l]])
  Z_apf[l] <- Z_apf[l] + log(mean(exp(w_apf[n, 1:N[l]]-mx))) + mx
  
  return(list(X_apf, w_apf, Z_apf))
}

APF_changemu <- function(w, X, psi_pa, l, Z_apf, N){
  #l >= 2
  X_apf <- array(NA, dim = c(Time, N[l], d))
  w_apf <- matrix(NA, Time, N[l])
  Z_apf[l] <- 0
  
  X_apf[n-L+1,1:N[l],] <- change_mupsi(w, X, psi_pa, n-L+1, N, l)[[1]]
  w_ <- change_mupsi(w, X, psi_pa, n-L+1, N, l)[[2]]
  for (i in 1:N[l]){
    w_apf[n-L+1, i] <- log(sum(w_*dmvn(X_apf[n-L+1,,], as.vector(diag(((psi_pa[n-L+1, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d)%*%
                                                                   (A%*%X[n-L,i,] + diag(psi_pa[n-L+1, (d+1):(d+d)]^(-1), nrow=d,ncol=d)%*%psi_pa[n-L+1,1:d])),
                                       diag(((psi_pa[n-L+1, (d+1):(d+d)])^(-1)+1)^(-1), nrow=d,ncol=d))))
  }
  re=0
  #t=2:T
  #2. conditional sample
  for(t in (n-L+2):n){
    
    #a)
    
    if(ESS(t,w_apf, is.log = TRUE) <= kappa*N[l]){
      
      mix <- SR(t, w_apf)
      
      for(i in 1:N[l]){
        X_apf[t,i,] <- f_aux(X_apf[t-1, mix[i],], psi_pa, t)
        w_apf[t,i] <- log(g_aux(obs[t,], X_apf[t,i,], t, psi_pa, n))  
      }
    }else{
      #b)
      for(i in 1:N[l]){
        X_apf[t,i,] <- f_aux(X_apf[t-1,i,], psi_pa, t) 
        w_apf[t,i] <- w_apf[t-1,i] + log(g_aux(obs[t,], X_apf[t,i,], t, psi_pa, n))  
      }
    }
    
  }
  
  mx <- max(w_apf[n, 1:N[l]])
  Z_apf[l] <- Z_apf[l] + log(mean(exp(w_apf[n, 1:N[l]]-mx))) + mx
  
  return(list(X_apf, w_apf, Z_apf))
}

####Psi####

Psi <- function(l, n, X_apf, N){
  psi <- matrix(NA, nrow = Time, ncol = N[l])
  
  psi_pa <- matrix(NA, nrow = Time, ncol = 2*d)
  
  for(t in n:(n-L+1)){
    
    #print(t)
    
    if(t == n){
      
      psi[t,] <- dmvn(X_apf[t,1:N[l],], obs[t,], D)
      
      
    }else{ #top4
      for(i in 1:N[l]){
        
        psi[t,i] <- g(obs[t,],X_apf[t,i,])*dmvn(as.vector(A%*%X_apf[t,i,]), 
                                                psi_pa[t+1, 1:d], diag(psi_pa[t+1, (d+1):(d+d)]+1, nrow=d,ncol=d))
      }
      
    }
    
    
    fn <- function(x, X_apf, psi){
      lambda <-  sum(dmvn(X_apf[t,1:N[l],],x[1:d],
                          diag(x[(d+1):(d+d)], nrow=d,ncol=d))%*%psi[t,1:N[l]])/sum(psi[t,1:N[l]]^2) #2* or not 2*?
      return(sum((psi[t,1:N[l]] - (1/lambda)*dmvn(X_apf[t,1:N[l],],
                                                  x[1:d],diag(x[(d+1):(d+d)], nrow=d,ncol=d)))^2))
    }#change 2 dmvn to dnorm
    
    
    if(t == n){  #top2
      psi_pa[t,] <- optim(par = c(colMeans(X_apf[t,1:N[l],]), rep(1, d)),
                          fn = fn, X_apf = X_apf, psi = psi, method='L-BFGS-B',
                          lower=c(rep(-Inf, d),rep(0.1, d)), upper=rep(Inf, 2*d))$par
    }else{
      
      psi_pa[t,] <- optim(par = c(X_apf[t,which.max(psi[t,1:N[l]]),], rep(1, d)), 
                          fn = fn, X_apf = X_apf, psi = psi, method='L-BFGS-B',
                          lower=c(rep(-Inf, d),rep(0.1, d)), upper=rep(Inf, 2*d))$par
    }
    
    #print(paste0('psi_pa=', psi_pa[t, 1:d]))
    
    #print(obs[t,])
  }
  
  return(psi_pa)
}

####init_APF####
init_APF <- function(){
  l = 1
  
  Z_apf[1] = 0
  X_init <- array(NA, dim = c(Time, Num, d))
  w_init <- matrix(NA, Time, N[l])
  
  X_init[n-L+1,,] <- rnorm(N[l]*d) 
  for(i in 1:N[l]){
    w_init[n-L+1,i] <- log(g(obs[n-L+1,], X_init[n-L+1,i,]))  
  }
  
  for(t in (n-L+2):n){
    
    if(ESS(t,w_init, is.log=TRUE) <= kappa*N[l]){
      
      mix <- SR(t, w_init)
      
      for(i in 1:N[l]){
        X_init[t,i,] <- f(X_init[t-1,mix[i],]) 
        w_init[t,i] <- log(g(obs[t,], X_init[t,i,]))  
      }
      
    }else{
      
      for(i in 1:N[l]){
        X_init[t,i,] <- f(X_init[t-1,i,]) 
        w_init[t,i] <- w_init[t-1,i] + log(g(obs[t,], X_init[t,i,]))  
      }
    }
  }
  
  mx <- max(w_init[n, 1:N[l]])
  Z_apf[1] <- Z_apf[1] + log(mean(exp(w_init[n, 1:N[l]]-mx))) + mx
  
  return(list(X_init = X_init, w_init = w_init, Z_apf = Z_apf))
}

####change init mu####
init_changemu <- function(w, X){
  l = 1
  
  Z_apf[1] = 0
  X_init <- array(NA, dim = c(Time, Num, d))
  w_init <- matrix(NA, Time, N[l])
  
  X_init[n-L+1,,] <- change_mu(w, X)[[1]]
  w_ <- change_mu(w, X)[[2]]
  #w_init[n-L+1, ] <- log(sum(exp(w[n-1,])*dnorm(X_init[n-L+1,], A*X[n-L,], B)))
  for (i in 1:Num){
    w_init[n-L+1, i] <- log(sum(w_*dmvn(X_init[n-L+1,,], A%*%X[n-L,i,], B)))
  }
  
  for(t in (n-L+2):n){
    
    if(ESS(t,w_init, is.log=TRUE) <= kappa*N[l]){
      
      mix <- SR(t, w_init)
      
      for(i in 1:N[l]){
        X_init[t,i,] <- f(X_init[t-1,mix[i],]) 
        w_init[t,i] <- log(g(obs[t,], X_init[t,i,]))  
      }
      
    }else{
      
      for(i in 1:N[l]){
        X_init[t,i,] <- f(X_init[t-1,i,]) 
        w_init[t,i] <- w_init[t-1,i] + log(g(obs[t,], X_init[t,i,]))  
      }
    }
  }
  
  mx <- max(w_init[n, 1:N[l]])
  Z_apf[1] <- Z_apf[1] + log(mean(exp(w_init[n, 1:N[l]]-mx))) + mx
  
  return(list(X_init = X_init, w_init = w_init, Z_apf = Z_apf))
}

####psi_APF####
psi_APF <- function(n, X_apf, Z_apf, w_apf, w, X){
  l = 1
  w_apf <- w_apf
  
  while(TRUE){
    
    output <- list()
    
    if(l != 1){
      output <- APF(psi_pa, l, Z_apf, N)
      X_apf <- output[[1]]
      w_apf <- output[[2]]
      Z_apf <- output[[3]]
    }
    
    #b)
    
    if(l <= k){
      #psi^{l+1}
      
      psi_pa <- Psi(l, n, X_apf, N) 
      
      if(l > k & N[max(l-k,1)] == N[l] & is.unsorted(Z_apf[max(l-k,1):l])){  
        N[l+1] <- 2*N[l]
        
      }else{
        N[l+1] <- N[l]
      }
      
      l <- l+1
    }else break
  }
  output <- APF(psi_pa, l, Z_apf, N)
  X_apf <- output[[1]]
  w_apf <- output[[2]]
  Z_apf <- output[[3]]
  return(list(psi_pa, X_apf, w_apf, Z_apf[l]))
}


n <- L

####Init_algorithm####
Init <- function(){
  output <- init_APF()
  X_apf <- output[[1]]
  w_apf <- output[[2]]
  Z_apf <- output[[3]]
  
  output2 <- psi_APF(n, X_apf, Z_apf, w_apf, w = 0, X = 0)
  X <- output2[[2]]
  w <- output2[[3]]
  Z <- output2[[4]]
  
  return(list(X = X, w = w, Z = Z))
}

output <- Init() #normal results
X <- output[[1]]
w <- output[[2]]
Z <- output[[3]]

re = 0

####Algorithm####
for(n in (L+1):Time){
  print(n)
  
  if(ESS(n,w, is.log = TRUE) <= kappa*Num){
    re = re + 1
    s <- SR(n, w)
    X <- X[,s,]
    w <- w[,s]
  }
  
  output <- init_changemu(w, X)
  X_apf <- output[[1]]
  w_apf <- output[[2]]
  Z_apf <- output[[3]]
  
  output2 <- psi_APF(n, X_apf, Z_apf, w, X)
  
  X <- output2[[2]]
  w <- output2[[3]]
  
  #Num <- dim(X[n,,])[1]
  #N[1] <- Num
  
} 
mx <- max(w[Time,]) 
#Z <- Z + log(mean(exp(w[Time,]-mx))) + mx
w_ <- exp(w[Time,]-mx)/sum(exp(w[Time,] - mx))
weighted_mean <- colSums(w_*X[Time,,])
covariance <- cov(X[Time,,])

weighted_mean
fks_mean
det(covariance)
det(fks_cov)
mahalanobis(weighted_mean, fks_mean, fks_cov)

proc.time() - start
for (t in 1:Time){
  avg[index, t] <- length(unique(X[t,,]))
}

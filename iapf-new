library(mvtnorm)
library(MASS)
library(FKF)

set.seed(123)
library(FKF)
final <- vector()
Num <- 1000
N <- vector()
N[1] <- Num
Time = 100
#L_candidate=c(1,2,3,5,7,9)
#L=L_candidate[(seed.label-1)%/%5+1]
L = 2
A = 0.42
B = 1
C = 1
D = 1
d = 1
k <- 5
tau <- 0.5
X_true <- vector()
obs <- vector()
kappa = 0.5
dt <- ct <- 0
Tt <- as.matrix(A)
P0 <- Zt <- Ht <- Gt <- as.matrix(1)
a0 <- 0
index <- 1
avg <- matrix(nrow = 1, ncol = Time)

Obs <- function(){
  X_true[1] <- rnorm(1)   
  for(t in 2:Time){  #observations
    X_true[t] <- rnorm(1) + A*X_true[t-1] 
  }
  return(rnorm(Time) + X_true)
}
obs <- Obs()

#for(qq in (10*((seed.label-1)%%5+1)-9):(10*((seed.label-1)%%5+1))){
 # set.seed(qq)
  X <- matrix(NA, Time, Num)
  X_ <- matrix(NA, Time, Num)
  w <- matrix(NA, Time, Num)
  Z = 0
  Z_apf <- vector()
  
  ESS <- function(t,w, is.log=FALSE){
    if(is.log) {
      mx <- max(w[t-1,])
      s <- sum(exp(w[t-1,]-mx))
      ess <- 1/sum((exp(w[t-1,]-mx)/s)^2)
    }else{
      s <- sum(w[t-1,])
      ess <- 1/sum((w[t-1,]/s)^2) 
    }
    return(ess)  
  }
  
  fkf.obj <- fkf(a0, P0, dt, ct, Tt, Zt, Ht, Gt, yt = t(obs))
  fks.obj <- fks(fkf.obj)
  fks_mean <- fks.obj$ahatt[,Time]
  fks_var <- fks.obj$Vt[,,Time]
  
  f <- function(x){
    return (rnorm(d) + as.vector(A*x))   #trans prob
  }
  
  g <- function(y, x){  
    return (det(diag(2*pi, nrow = d, ncol = d))^(-1/2)*exp((-1/2)*(y-x)^2)) #obs prob  C%*%x = x
    #dnorm(X[t,1:N],obs[t])
  }
  
  mu_aux <- function(psi_pa, l, N, t){
    return(rnorm(N[l], mean =  psi_pa[t,1]/(1+psi_pa[t,2]^2), sd = psi_pa[t,2]^2/(1+psi_pa[t,2]^2)))
  }
  
  g_aux <- function(y, x, t, psi_pa, n){  
    if(t == (n-L+1)){
      return(dnorm(x, y)*psi_tilda(x, psi_pa, t, n)*(2*pi*(psi_pa[t, 2]^2+1))^
               (-1/2)*exp((-1/2)*(-psi_pa[t, 1])^2/(psi_pa[t, 2]^2+1))/psi_t(x, psi_pa, t, n))  #initialisation of g = t=1 or t=L?
    }else{
      return(dnorm(x, y)*psi_tilda(x, psi_pa, t, n)/psi_t(x, psi_pa, t, n))  #g_2:T 
    }
  }
  
  
  f_aux <- function(x, psi_pa, t){
    return(rnorm(1, (psi_pa[t,2]^2*A*x +psi_pa[t,1])/(psi_pa[t,2]^2+1), 
                 sqrt(psi_pa[t,2]^2 / (psi_pa[t,2]^2+1))))  #f_2:T 
  }
  
  Num_apf <- function(Z, l, k){
    return(sd(exp(Z[max(l-k,1):l]-max(Z[max(l-k,1):l])))/mean(exp(Z[max(l-k,1):l]-max(Z[max(l-k,1):l]))))
  }
  
  psi_tilda <- function(x, psi_pa, t, n){  #from 0 to T. 0,T = 1 
    if(t == n){
      psi_tilda <- 1
    }else{   #psi_pa_t = psi_t
      psi_tilda <- (2*pi*(psi_pa[t+1, 2]^2+1))^   #dnorm(A*x, psi_pa[t+1, 1], sqrt(psi_pa[t+1,2]^2+sigma^2)))
        (-1/2)*exp((-1/2)*(A*x-psi_pa[t+1, 1])^2/(psi_pa[t+1, 2]^2+1))  #f(xt, ÃÂt+1 )   #var should be psi^2+1?
    }
    return(psi_tilda)
  }
  
  psi_t <- function(x, psi_pa, t, n){ #from 1 to T+1. 1, T+1 = 1  
    if(t == (n + 1)){
      psi_t <- 1
    }else{
      psi_t <- (2*pi*psi_pa[t, 2]^2)^(-1/2)*exp((-1/2)*(x-psi_pa[t, 1])^2/(psi_pa[t, 2]^2))  
    }
    return(psi_t)
  }
  
  change_mu <- function(w, X){
    sample <- vector()
    mx <- max(w[n-1,])
    w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
    s <- sample(1:Num, size = Num, replace = TRUE, prob = w_) 
    mus <- X[n-L,]
    for(i in 1:Num){
      sample[i] <- rnorm(1, mean = A*mus[s[i]], B)
    }
    return(list(sample, w_))
  }
  
  change_mupsi <- function(w, X, psi_pa, t, N, l){
    sample <- vector()
    mx <- max(w[n-1,])
    w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
    s <- sample(1:Num, size = Num, replace = TRUE, prob = w_) 
    mus <- X[n-L,]
    for(i in 1:N[l]){
      sample[i] <- f_aux(mus[s[i]], psi_pa, t)
      
    }
    return(list(sample, w_))
  }
  
  ####APF####
  APF <- function(psi_pa, l, Z_apf, N){
    #l >= 2
    X_apf <- matrix(NA, Time, N[l])
    w_apf <- matrix(NA, Time, N[l])
    Z_apf[l] <- 0
    
    X_apf[n-L+1,1:N[l]] <- mu_aux(psi_pa, l, N, n-L+1)  
    
    for(i in 1:N[l]){
      w_apf[n-L+1,i] <- log(g_aux(obs[n-L+1], X_apf[n-L+1,i],n-L+1, psi_pa, n)) 
    }
    re=0
    #t=2:T
    #2. conditional sample
    for(t in (n-L+2):n){
      
      #a)
      
      if(ESS(t,w_apf, is.log = TRUE) <= kappa*N[l]){
        re = re + 1
        mx <- max(w_apf[t-1,])
        w_ <- exp(w_apf[t-1,1:N[l]]-mx)/sum(exp(w_apf[t-1, 1:N[l]] - mx))
        Z_apf[l] = Z_apf[l] + log(mean(exp(w_apf[t-1,]-mx))) + mx
        mix <- sample(1:N[l],N[l], replace = TRUE, prob = w_)
        
        for(i in 1:N[l]){
          X_apf[t,i] <- f_aux(X_apf[t-1, mix[i]], psi_pa, t)
          w_apf[t,i] <- log(g_aux(obs[t], X_apf[t,i], t, psi_pa, n))  
        }
      }else{
        #b)
        for(i in 1:N[l]){
          X_apf[t,i] <- f_aux(X_apf[t-1,i], psi_pa, t) 
          w_apf[t,i] <- w_apf[t-1,i] + log(g_aux(obs[t], X_apf[t,i], t, psi_pa, n))  
        }
      }
      
    }
    
    mx <- max(w_apf[n, 1:N[l]])
    Z_apf[l] <- Z_apf[l] + log(mean(exp(w_apf[n, 1:N[l]]-mx))) + mx
    
    return(list(X_apf, w_apf, Z_apf))
  }
  
  APF_changemu <- function(w, X, psi_pa, l, Z_apf, N){
    #l >= 2
    X_apf <- matrix(NA, Time, N[l])
    w_apf <- matrix(NA, Time, N[l])
    Z_apf[l] <- 0
    
    X_apf[n-L+1,1:N[l]] <- change_mupsi(w, X, psi_pa, n-L+1, N, l)[[1]]
    w_ <- change_mupsi(w, X, psi_pa, n-L+1, N, l)[[2]]
    #w_apf[n-L+1, ] <- log(sum(exp(w[n-1,])*dnorm(X_apf[n-L+1,], (psi_pa[n-L+1,2]^2*A*X[n-L,] +psi_pa[n-L+1,1])/(psi_pa[n-L+1,2]^2+1),
     #                                             sqrt(psi_pa[n-L+1,2]^2 / (psi_pa[n-L+1,2]^2+1)))))
    for (i in 1:N[l]){
      w_apf[n-L+1, i] <- log(sum(w_*dnorm(X_apf[n-L+1,], (psi_pa[n-L+1,2]^2*A*X[n-L,i] +psi_pa[n-L+1,1])/(psi_pa[n-L+1,2]^2+1),
                                                    sqrt(psi_pa[n-L+1,2]^2 / (psi_pa[n-L+1,2]^2+1)))))
    }
    
    re=0
    #t=2:T
    #2. conditional sample
    for(t in (n-L+2):n){
      
      #a)
      
      if(ESS(t,w_apf, is.log = TRUE) <= kappa*N[l]){
        re = re + 1
        mx <- max(w_apf[t-1,])
        w_ <- exp(w_apf[t-1,1:N[l]]-mx)/sum(exp(w_apf[t-1, 1:N[l]] - mx))
        Z_apf[l] = Z_apf[l] + log(mean(exp(w_apf[t-1,]-mx))) + mx
        mix <- sample(1:N[l],N[l], replace = TRUE, prob = w_)
        
        for(i in 1:N[l]){
          X_apf[t,i] <- f_aux(X_apf[t-1, mix[i]], psi_pa, t)
          w_apf[t,i] <- log(g_aux(obs[t], X_apf[t,i], t, psi_pa, n))  
        }
      }else{
        #b)
        for(i in 1:N[l]){
          X_apf[t,i] <- f_aux(X_apf[t-1,i], psi_pa, t) 
          w_apf[t,i] <- w_apf[t-1,i] + log(g_aux(obs[t], X_apf[t,i], t, psi_pa, n))  
        }
      }
      
    }
    
    mx <- max(w_apf[n, 1:N[l]])
    Z_apf[l] <- Z_apf[l] + log(mean(exp(w_apf[n, 1:N[l]]-mx))) + mx
    
    return(list(X_apf, w_apf, Z_apf))
  }
  
  ####Psi####
  
  Psi <- function(l, n, X_apf, N){
    psi <- matrix(NA, nrow = Time, ncol = N[l])
    psi_pa <- matrix(NA, nrow = Time, ncol = 2)
    #calculate psi
    for(t in n:(n-L+1)){
      
      #print(t)
      
      if(t == n){
        psi[t,] <- dnorm(X_apf[t,1:N[l]], obs[t], D)   
        
      }else{
        psi[t,] <- dnorm(X_apf[t,], obs[t])*dnorm(A*X_apf[t,], psi_pa[t+1, 1], sqrt(psi_pa[t+1,2]^2+1))
      }
      
      #2. calculate psi_t
      #calculate min
      fn <- function(x, X_apf, psi){
        lambda <-  2*sum(dnorm(X_apf[t,1:N[l]],mean=x[1],sd=x[2]) * psi[t,1:N[l]]) / sum(psi[t,]^2)
        return(sum((psi[t,1:N[l]] - (1/lambda)*dnorm(X_apf[t,1:N[l]],mean=x[1],sd=x[2]))^2))
      }
      
      #get the distribution of psi_t
      if(t == n){
        psi_pa[t,] <- optim(par = c(mean(X_apf[t,1:N[l]]),1),
                            fn = fn, X = X_apf, psi = psi, method='L-BFGS-B',lower=c(-Inf,0.1),upper=c(Inf,Inf))$par
      }else{
        
        psi_pa[t,] <- optim(par = c(X_apf[t,which.max(psi[t,1:N[l]])],1), 
                            fn = fn, X = X_apf, psi = psi, method='L-BFGS-B',lower=c(-Inf,0.1),upper=c(Inf,Inf))$par
      }
      
      print(psi_pa[t, 1])
      print(obs[t])
    }
    
    
    
    return(psi_pa)
  }
  
  ####init_APF####
  init_APF <- function(){
    l = 1
    re = 0
    Z_apf[1] = 0
    X_init <- matrix(NA, Time, N[l])
    w_init <- matrix(NA, Time, N[l])
    
    X_init[n-L+1,] <- rnorm(N[l])  
    w_init[n-L+1,] <- dnorm(X_init[n-L+1,],obs[n-L+1], log = TRUE)
    
    for(t in (n-L+2):n){
      
      if(ESS(t,w_init, is.log=TRUE) <= kappa*N[l]){
        re = re + 1
        mx <- max(w_init[t-1,])
        w_ <- exp(w_init[t-1,]-mx)/sum(exp(w_init[t-1,] - mx))
        Z_apf[1] = Z_apf[1] + log(mean(exp(w_init[t-1,] - mx))) + mx
        mix <- sample(1:N[l],N[l], replace = TRUE, prob = w_)
        
        X_init[t,1:N[l]] <- rnorm(N[l]) + A*X_init[t-1, mix]   
        w_init[t,1:N[l]] <- dnorm(X_init[t,], obs[t], log = TRUE) 
        
      }else{
        X_init[t,1:N[l]] <- rnorm(N[l]) + A*X_init[t-1,] 
        w_init[t,1:N[l]] <- w_init[t-1,] + dnorm(X_init[t,], obs[t], log = TRUE)  
      }
    }
    
    mx <- max(w_init[n, 1:N[l]])
    Z_apf[1] <- Z_apf[1] + log(mean(exp(w_init[n, 1:N[l]]-mx))) + mx
    
    return(list(X_init = X_init, w_init = w_init, Z_apf = Z_apf))
  }
  
  ####psi_APF####
  psi_APF <- function(n, X_apf, Z_apf, w, X){
    l = 1
    
    while(TRUE){
      
      output <- list()
      
      if(l != 1){
        if(n == L){
          output <- APF(psi_pa, l, Z_apf, N)
        }else{
          output <- APF_changemu(w, X, psi_pa, l, Z_apf, N)
        }
        
        X_apf <- output[[1]]
        w_apf <- output[[2]]
        Z_apf <- output[[3]]
      }
      
      #b)
      
      if(l <= k | (Num_apf(Z_apf, l, k) >= tau)){
        #psi^{l+1}
        
        psi_pa <- Psi(l, n, X_apf, N) 
        
        if(l > k & N[max(l-k,1)] == N[l] & is.unsorted(Z_apf[max(l-k,1):l])){  
          N[l+1] <- 2*N[l]
          
        }else{
          N[l+1] <- N[l]
        }
        
        l <- l+1
      }else break
    }
    return(list(psi_pa, X_apf, w_apf, Z_apf[l]))
  }
  
  ####change init mu####
  init_changemu <- function(w, X){
    l = 1
    Z_apf[1] = 0
    X_init <- matrix(NA, Time, N[l])
    w_init <- matrix(NA, Time, N[l])
    
    X_init[n-L+1,] <- change_mu(w, X)[[1]]
    w_ <- change_mu(w, X)[[2]]
    #w_init[n-L+1, ] <- log(sum(exp(w[n-1,])*dnorm(X_init[n-L+1,], A*X[n-L,], B)))
    for (i in 1:Num){
      w_init[n-L+1, i] <- log(sum(w_*dnorm(X_init[n-L+1,], A*X[n-L,i], B)))
    }
    
    for(t in (n-L+2):n){
      
      if(ESS(t,w_init, is.log=TRUE) <= kappa*N[l]){
        re = re + 1
        mx <- max(w_init[t-1,])
        w_ <- exp(w_init[t-1,]-mx)/sum(exp(w_init[t-1,] - mx))
        Z_apf[1] = Z_apf[1] + log(mean(exp(w_init[t-1,] - mx))) + mx
        mix <- sample(1:N[l],N[l], replace = TRUE, prob = w_)
        
        X_init[t,1:N[l]] <- rnorm(N[l]) + A*X_init[t-1, mix]   
        w_init[t,1:N[l]] <- dnorm(X_init[t,], obs[t], log = TRUE) 
        
      }else{
        X_init[t,1:N[l]] <- rnorm(N[l]) + A*X_init[t-1,] 
        w_init[t,1:N[l]] <- w_init[t-1,] + dnorm(X_init[t,], obs[t], log = TRUE)  
      }
    }
    
    mx <- max(w_init[n, 1:N[l]])
    Z_apf[1] <- Z_apf[1] + log(mean(exp(w_init[n, 1:N[l]]-mx))) + mx
    
    return(list(X_init = X_init, w_init = w_init, Z_apf = Z_apf))
  }
  
  n <- L
  
  ####Init_algorithm####
  Init <- function(){
    output <- init_APF()
    X_apf <- output[[1]]
    w_apf <- output[[2]]
    Z_apf <- output[[3]]
    
    output2 <- psi_APF(n, X_apf, Z_apf, w = 0, X = 0)
    X <- output2[[2]]
    w <- output2[[3]]
    Z <- output2[[4]]
    
    return(list(X = X, w = w, Z = Z))
  }
  
  output <- Init() #normal results
  X <- output[[1]]
  w <- output[[2]]
  Z <- output[[3]]
  
  re = 0
  
  ####Algorithm####
  for(n in (L+1):Time){
    if(ESS(n,w, is.log = TRUE) <= kappa*Num){
      re = re + 1
      mx <- max(w[n-1,])
      w_ <- exp(w[n-1,]-mx)/sum(exp(w[n-1,] - mx))
      Z = Z + log(mean(exp(w[n-1,]-mx))) + mx
      s <- sample(1:Num, size=Num, replace=TRUE, prob=w_) 
      X <- X[,s]
    }
    
    output <- init_changemu(w, X)
    X_apf <- output[[1]]
    w_apf <- output[[2]]
    Z_apf <- output[[3]]
    
    output2 <- psi_APF(n, X_apf, Z_apf, w, X)
    
    X <- output2[[2]]
    w <- output2[[3]]
    #Z <- output2[[4]]  #低了点
  } #results of weights are strange
  mx <- max(w[Time,]) #逐渐增加？
  Z <- Z + log(mean(exp(w[Time,]-mx))) + mx
  
  w_ <- exp(w[Time,]-mx)/sum(exp(w[Time,] - mx))
  weighted_mean <- sum(w_*X[Time,])
  s_mean <- sum(w_*X[Time,]^2)
  variance <- s_mean - weighted_mean^2
  
  for (t in 1:Time){
    avg[index, t] <- length(unique(X[t,]))
  }
  #print(exp(Z-fkf.obj))
  #final[index] <- exp(Z-fkf.obj)
  #index = index + 1
  
